-- 杂货店

cgroceryshop = class("cgroceryshop",cshop)

function cgroceryshop:init(conf)
	cshop.init(self,conf)	
end

function cgroceryshop:onlogin(player)
	if self.len == 0 then
		self:_refresh("onlogin")
	end
end

function cgroceryshop:_refresh(reason)
	local group_ids = {}
	for id,v in pairs(data_1401_GroceryShop) do
		if v.sumnum ~= 0 then
			local group = v.group
			if not group_ids[group] then
				group_ids[group] = {}
			end
			table.insert(group_ids[group],id)
		end
	end
	local goodsid_ids = {}
	for group,ids in pairs(group_ids) do
		local id = randlist(ids)
		local data = data_1401_GroceryShop[id]
		local goods_id = data.goodsid
		if not goodsid_ids[goods_id] then
			goodsid_ids[goods_id] = {}
		end
		table.insert(goodsid_ids[goods_id],id)
	end
	local id_ratio = {}
	local goodslst = {}
	local id
	for goods_id,ids in pairs(goodsid_ids) do
		local num = table.count(ids)
		if num ~= 1 then
			for _,id in pairs(ids) do
				id_ratio = {}
				local data = data_1401_GroceryShop[id]
				id_ratio[id] = data.ratio
			end
			id = choosekey(id_ratio,function (id,ratio)
				return ratio
			end)
		end
		local data = data_1401_GroceryShop[id]
		local achieve_data = data_achievement[data.achieve]
		table.insert(goodslst,{
			id = id,
			goods_id = data.goods_id,
			itemtype = data.itemtype,
			num = data.num,
			sumnum = data.sumnum,
			price = data.price,
			restype = data.restype,
			need_itemtype = data.need_itemtype,
			need_num = data.need_num,
			achieve = achieve_data.id,
			bind = data.bind == 1 and 1 or nil,
		})
	end
	logger.log("info","shop",format("[%s] [refresh] goodslst=%s reason=%s","grocery",goodslst,reason))
	self:clear()
	self:gen_goods(goodslst)
	self:sync_allgoods()
end

function cgroceryshop:refresh()
	self._refresh("refresh")
end

function cgroceryshop:buygoods(player,id,buynum)
	if not player.pid then
		return
	end
	--检查成就
	local isok,errmsg = self.buy(player,id,buynum)
	if isok then
		data = data_1401_GroceryShop[id]
		local itemdb = player:getitemdb(data.itemtype)
		local reason = "shop_grocery.buy"
		itemdb:costitembytype(data.itemtype,buynum,reason)
	end
	if not isok then
		net.msg.S2c.notify(player.pid,errmsg)
		return
	end
end

function cgroceryshop:sync_allgoods()
	local goodslst = {}
	for id,goods in pairs(self.objs) do
		table.insert(goodslst,goods)
	end
	sendpackage(self.pid,"shop","allgrocerygoods",{
		shopname = self.name,
		goodslst = goodslst,
		})
end

function cgroceryshop:onupdate(id,attrs)
	attrs.id = id
	sendpackage(self.pid,"shop","upgrocerygoods",{
		shopname = self.name,
		goods = attrs,
		})
end
return cgroceryshop
