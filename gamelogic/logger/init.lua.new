
logger = logger or {}

function logger.debug(filename,...)
	if logger.loglevel > logger.LOG_DEBUG then
		return
	end
	g_serverinfo:logger(filename,"[DEBUG]",...)
end

function logger.info(filename,...)
	if logger.loglevel > logger.LOG_INFO then
		return
	end
	g_serverinfo:logger(filename,"[INFO]",...)
end

function logger.warning(filename,...)
	if logger.loglevel > logger.LOG_WARNING then
		return
	end
	g_serverinfo:logger(filename,"[WARNING]",...)
end

function logger.error(filename,...)
	if logger.loglevel > logger.LOG_ERROR then
		return
	end
	g_serverinfo:logger(filename,"[ERROR]",...)
end

function logger.critical(filename,...)
	if logger.loglevel > logger.LOG_CRITICAL then
		return
	end
	g_serverinfo:logger(filename,"[CRITICAL]",...)
end

function logger.log(loglevel,filename,...)
	local log = assert(logger[loglevel],"invalid loglevel:" .. tostring(loglevel))
	
	assert(select("#",...) > 0,string.format("%s %s:null logname",loglevel,filename))
	log(filename,...)
end

function logger.sendmail(to_list,subject,content)
	skynet.send(LOGGERSRV,"lua","sendmail",to_list,subject,content)
end

-- console/print
function logger.print(...)
	if logger.loglevel > logger.LOG_DEBUG then
		return
	end
	print(...)
end

function logger.pprintf(fmt,...)
	if logger.loglevel > logger.LOG_DEBUG then
		return
	end
	pprintf(string.format("[%s] %s",os.date("%Y-%m-%d %H:%M:%S"),fmt),...)
end


function logger.setloglevel(loglevel)
	if type(loglevel) == "string" then
		loglevel = logger.LOGLEVEL_NAME_ID[loglevel]
	end
	logger.loglevel = loglevel
end

logger.LOG_DEBUG = 1
logger.LOG_INFO = 2
logger.LOG_WARNING = 3
logger.LOG_ERROR = 4
logger.LOG_CRITICAL = 5
logger.LOGLEVEL_NAME_ID = {
	debug = logger.LOG_DEBUG,
	info = logger.LOG_INFO,
	warning = logger.LOG_WARNING,
	["error"] = logger.LOG_ERROR,
	critical = logger.LOG_CRITICAL,
}

function logger.init()
	local loglevel = skynet.getenv("loglevel")
	logger.setloglevel(loglevel)
end

function logger.shutdown()
end
return logger
