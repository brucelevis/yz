--关卡容器
cchapterdb = class("cchapterdb",ccontainer)

function cchapterdb:init(conf)
	ccontainer.init(self,conf)
	self.mainlinestar = {}
	self.awardrecord = {}
	self.loadstate = "unload"
end

function cchapterdb:load(data)
	if table.isempty(data) then
		return
	end
	ccontainer.load(self,data)
	self.awardrecord = data.awardrecord
	for _,chapter in pairs(self.objs) do
		self:onupdate(chapter.id)
	end
end

function cchapterdb:save()
	data = ccontainer.save(self)
	data.awardrecord = self.awardrecord
	return data
end

function cchapterdb:onupdate(chapterid)
	local chapterdata = self:getchapterdata(chapterid)
	local chapter = self:get(chapterid)
	if chapterdata.line == 1 then
		local section = chapterdata.section
		if not self.mainlinestar[section] then
			self.mainlinestar[section] = {}
		end
		self.mainlinestar[section][chapterid] = chapter.star
	end
	net.chapter.S2C.update(self.pid,self:pack(chapter))
end

function cchapterdb:onadd(chapter)
	net.chapter.S2C.unlock(self.pid,chapter.id)
end

function cchapterdb:clear()
	ccontainer.clear(self)
	self.awardrecord = {}
	self.mainlinestar = {}
end

function cchapterdb:onlogin(player)
	local chapters = {}
	for _,chapter in pairs(self.objs) do
		table.insert(chapters,self:pack(chapter))
	end
	net.chapter.S2C.allchapter(self.pid,chapters)
	net.chapter.S2C.awardrecord(self.pid,self.awardrecord)
end

function cchapterdb:findrecord(awardid)
	return table.find(self.awardrecord,awardid)
end

function cchapterdb:getchapterdata(chapterid)
	local data = data_1201_Chapter[chapterid]
	if data and data.isopen == 1 then
		return data
	end
end

function cchapterdb:getawarddata(awardid)
	return data_1202_ChapterAward[awardid]
end

function cchapterdb:sumstar(section)
	if not self.mainlinestar[section] then
		return 0
	end
	local sum = 0
	for _,star in pairs(self.mainlinestar[section]) do
		sum = sum + star
	end
	return sum
end

function cchapterdb:pack(chapter)
	return {
		chapterid = chapter.id,
		star = chapter.star,
		pass = chapter.pass,
	}
end

function cchapterdb:unlockchapter(chapterid)
	if self:get(chapterid) then
		return
	end
	local chapterdata = self:getchapterdata(chapterid)
	if not chapterdata then
		return
	end
	logger.log("info","chapter",format("[unlock] pid=%d chapterid=%d",self.pid,chapterid))
	local chapter = {
		star = 0,
		pass = false,
	}
	self:add(chapter,chapterid)
end

function cchapterdb:mainlineaward(awardid)
	local awarddata = self:getawarddata(awardid)
	if not awarddata then
		return
	end
	if self:findrecord(awardid) then
		net.msg.S2C.notify(self.pid,language.format("该奖励已经领取过了"))
		net.chapter.S2C.awardrecord(self.pid,self.awardrecord)
		return
	end
	local section,needstar = awarddata.section,awarddata.needstar
	if self:sumstar(section) < needstar then
		net.msg.S2C.notify(self.pid,language.format("需要达到{1}颗星才能领取该奖励",needstar))
		return
	end
	local player = playermgr.getplayer(self.pid)
	assert(player)
	logger.log("info","chapter",format("[award] pid=%d section=%d awardid=%d",self.pid,section,awardid))
	table.insert(self.awardrecord,awardid)
	player:additembytype(awarddata.item,awarddata.num,nil,"chapteraward")
	net.chapter.S2C.awardrecord(self.pid,self.awardrecord)
end

function cchapterdb:triggerwar(chapterid)
	local chapterdata = self:getchapterdata(chapterid)
	if not chapterdata or not self:get(chapterid) then
		return
	end
	local warid = chapterdata.warid
	local war = {
		wardataid = warid,
		attack_helpers = {},
		defense_helpers = {},
		wartype = WARTYPE_CHAPTER,
		chapterid = chapterid,
		pid = self.pid,
	}
	attackers = {self.pid,}
	local player = playermgr.getplayer(self.pid)
	assert(player)
	if player:teamstate() == TEAM_STATE_CAPTAIN then
		local team = teammgr.getteam(player.teamid)
		table.extend(attackers,team.members(TEAM_STATE_FOLLOW))
	end
	warmgr.startwar(attackers,{},war)
end

function cchapterdb:onwarend(war,result)
	local star = assert(result.star)
	local player = playermgr.getplayer(self.pid)
	local pidlst = {}
	if player:teamstate() == TEAM_STATE_CAPTAIN then
		local team = teammgr.getteam(player.teamid)
		pidlst = team.members()
	else
		pidlst = {self.pid,}
	end
	for _,pid in ipairs(pidlst) do
		local member = playermgr.getplayer(pid)
		member.chapterdb:onwarend2(star,war.chapterid)
	end
end

function cchapterdb:onwarend2(star,chapterid)
	local chapter = self:get(chapterid)
	if not chapter then
		return
	end
	if star > 0 then
		local chapterdata = self:getchapterdata(chapterid)
		local attrs = {}
		if not chapter.pass then
			attrs.pass = true
		end
		if chapterdata.line == 1 and chapter.star < star then
			attrs.star = star
		end
		if not table.isempty(attrs) then
			logger.log("info","chapter",format("[update] pid=%d chapterid=%d attrs=%s",self.pid,chapterid,attrs))
			self:update(chapterid,attrs)
		end
	end
end

return cchapterdb
